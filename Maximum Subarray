Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        //kadane algo
        int currsum=0;
        int  maxsum=0;
        for(int i =0;i<nums.size();i++)
        {
            currsum+=nums[i];
            if(currsum<0)
                currsum=0;
            
             maxsum=max(currsum,maxsum);
        }
        
       if(maxsum==0)
           return *max_element(nums.begin(),nums.end());
        
        return maxsum;
    }
    
};
